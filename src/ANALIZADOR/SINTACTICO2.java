
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ANALIZADOR;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SINTACTICO2 extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SINTACTICO2() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SINTACTICO2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SINTACTICO2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\007\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\011\000\002\005\010\000" +
    "\002\027\005\000\002\027\003\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\010" +
    "\000\002\007\004\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\007\000\002\007\003\000\002\007" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\006\005\000\002\006\007\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\006\000\002\010\011" +
    "\000\002\010\014\000\002\010\012\000\002\010\015\000" +
    "\002\016\013\000\002\016\012\000\002\023\003\000\002" +
    "\023\004\000\002\011\015\000\002\012\011\000\002\024" +
    "\012\000\002\013\012\000\002\017\006\000\002\017\005" +
    "\000\002\022\004\000\002\022\003\000\002\020\005\000" +
    "\002\020\004\000\002\014\007\000\002\021\004\000\002" +
    "\021\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\004\004\001\002\000\004\055\010\001" +
    "\002\000\004\002\007\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\022\011\001\002\000" +
    "\012\005\017\006\014\007\016\055\021\001\002\000\004" +
    "\055\274\001\002\000\014\005\ufffb\006\ufffb\007\ufffb\023" +
    "\ufffb\055\ufffb\001\002\000\004\055\uffe3\001\002\000\014" +
    "\005\ufffc\006\ufffc\007\ufffc\023\ufffc\055\ufffc\001\002\000" +
    "\004\055\uffe2\001\002\000\004\055\uffe4\001\002\000\014" +
    "\005\017\006\014\007\016\023\271\055\021\001\002\000" +
    "\004\024\022\001\002\000\006\025\023\055\025\001\002" +
    "\000\004\022\266\001\002\000\006\025\026\045\027\001" +
    "\002\000\006\025\ufff7\045\ufff7\001\002\000\004\022\031" +
    "\001\002\000\004\055\030\001\002\000\006\025\ufff8\045" +
    "\ufff8\001\002\000\030\005\017\006\014\007\016\010\046" +
    "\012\052\013\040\014\050\015\035\020\034\055\045\056" +
    "\044\001\002\000\040\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\020\uffeb\023\uffeb\055\uffeb\056\uffeb\001\002\000\040" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\023\uffec" +
    "\055\uffec\056\uffec\001\002\000\042\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\023\uffc2\041\265\055\uffc2\056" +
    "\uffc2\001\002\000\004\024\245\001\002\000\040\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\023\uffe6\055\uffe6" +
    "\056\uffe6\001\002\000\040\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\023\uffe9\055\uffe9\056\uffe9\001\002\000" +
    "\004\024\242\001\002\000\040\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\020\uffea\023\uffea\055\uffea\056\uffea\001\002" +
    "\000\040\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\023\uffe5\055\uffe5\056\uffe5\001\002\000\040\005\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\023\uffe8\055\uffe8\056" +
    "\uffe8\001\002\000\004\024\162\001\002\000\004\024\153" +
    "\001\002\000\004\024\115\001\002\000\040\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed\055\uffed\056" +
    "\uffed\001\002\000\004\022\103\001\002\000\032\005\017" +
    "\006\014\007\016\010\046\012\052\013\040\014\050\015" +
    "\035\020\034\023\102\055\045\056\073\001\002\000\004" +
    "\024\053\001\002\000\010\005\017\006\014\007\016\001" +
    "\002\000\004\041\055\001\002\000\002\001\002\000\004" +
    "\041\057\001\002\000\002\001\002\000\004\025\061\001" +
    "\002\000\004\022\062\001\002\000\030\005\017\006\014" +
    "\007\016\010\046\012\052\013\040\014\050\015\035\020" +
    "\034\055\045\056\044\001\002\000\032\005\017\006\014" +
    "\007\016\010\046\012\052\013\040\014\050\015\035\020" +
    "\034\023\074\055\045\056\073\001\002\000\040\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\023\ufff3\055\ufff3" +
    "\056\ufff3\001\002\000\040\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\023\ufff4\055\ufff4\056\ufff4\001\002\000" +
    "\040\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\023" +
    "\ufff6\055\ufff6\056\ufff6\001\002\000\040\005\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\023\ufff1\055\ufff1\056\ufff1" +
    "\001\002\000\040\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0" +
    "\020\ufff0\023\ufff0\055\ufff0\056\ufff0\001\002\000\040\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\023\ufff2\055" +
    "\ufff2\056\ufff2\001\002\000\040\005\uffee\006\uffee\007\uffee" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\023\uffee\055\uffee\056\uffee\001\002" +
    "\000\004\024\076\001\002\000\040\005\uffc0\006\uffc0\007" +
    "\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\023\uffc0\055\uffc0\056\uffc0\001" +
    "\002\000\040\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5\020" +
    "\ufff5\023\ufff5\055\ufff5\056\ufff5\001\002\000\002\001\002" +
    "\000\004\025\100\001\002\000\004\041\101\001\002\000" +
    "\040\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\023" +
    "\uffef\055\uffef\056\uffef\001\002\000\014\005\ufffa\006\ufffa" +
    "\007\ufffa\023\ufffa\055\ufffa\001\002\000\030\005\017\006" +
    "\014\007\016\010\046\012\052\013\040\014\050\015\035" +
    "\020\034\055\045\056\044\001\002\000\030\005\017\006" +
    "\014\007\016\010\046\012\052\013\105\014\050\015\035" +
    "\020\034\055\045\056\073\001\002\000\004\024\106\001" +
    "\002\000\002\001\002\000\004\025\110\001\002\000\006" +
    "\022\111\041\112\001\002\000\030\005\017\006\014\007" +
    "\016\010\046\012\052\013\040\014\050\015\035\020\034" +
    "\055\045\056\044\001\002\000\040\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\023\uffbe\055\uffbe\056\uffbe\001" +
    "\002\000\032\005\017\006\014\007\016\010\046\012\052" +
    "\013\040\014\050\015\035\020\034\023\114\055\045\056" +
    "\073\001\002\000\040\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\023\uffbf\055\uffbf\056\uffbf\001\002\000\002" +
    "\001\002\000\004\025\117\001\002\000\004\022\120\001" +
    "\002\000\030\005\017\006\014\007\016\010\046\012\052" +
    "\013\040\014\050\015\035\020\034\055\045\056\044\001" +
    "\002\000\034\005\017\006\014\007\016\010\046\011\122" +
    "\012\052\013\040\014\050\015\035\020\034\023\124\055" +
    "\045\056\073\001\002\000\006\010\141\022\142\001\002" +
    "\000\006\011\126\023\125\001\002\000\040\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\023\uffc8\055\uffc8\056" +
    "\uffc8\001\002\000\040\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\023\uffc6\055\uffc6\056\uffc6\001\002\000\006" +
    "\010\127\022\130\001\002\000\004\024\133\001\002\000" +
    "\030\005\017\006\014\007\016\010\046\012\052\013\040" +
    "\014\050\015\035\020\034\055\045\056\044\001\002\000" +
    "\032\005\017\006\014\007\016\010\046\012\052\013\040" +
    "\014\050\015\035\020\034\023\132\055\045\056\073\001" +
    "\002\000\040\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020" +
    "\uffc5\023\uffc5\055\uffc5\056\uffc5\001\002\000\002\001\002" +
    "\000\004\025\135\001\002\000\004\022\136\001\002\000" +
    "\030\005\017\006\014\007\016\010\046\012\052\013\040" +
    "\014\050\015\035\020\034\055\045\056\044\001\002\000" +
    "\032\005\017\006\014\007\016\010\046\012\052\013\040" +
    "\014\050\015\035\020\034\023\140\055\045\056\073\001" +
    "\002\000\006\011\uffc4\023\uffc4\001\002\000\004\024\145" +
    "\001\002\000\030\005\017\006\014\007\016\010\046\012" +
    "\052\013\040\014\050\015\035\020\034\055\045\056\044" +
    "\001\002\000\032\005\017\006\014\007\016\010\046\012" +
    "\052\013\040\014\050\015\035\020\034\023\144\055\045" +
    "\056\073\001\002\000\040\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\023\uffc7\055\uffc7\056\uffc7\001\002\000" +
    "\002\001\002\000\004\025\147\001\002\000\004\022\150" +
    "\001\002\000\030\005\017\006\014\007\016\010\046\012" +
    "\052\013\040\014\050\015\035\020\034\055\045\056\044" +
    "\001\002\000\032\005\017\006\014\007\016\010\046\012" +
    "\052\013\040\014\050\015\035\020\034\023\152\055\045" +
    "\056\073\001\002\000\006\011\uffc3\023\uffc3\001\002\000" +
    "\004\045\155\001\002\000\004\025\160\001\002\000\002" +
    "\001\002\000\004\025\uffb4\001\002\000\004\025\uffb5\001" +
    "\002\000\004\041\161\001\002\000\040\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6\055\uffb6\056\uffb6" +
    "\001\002\000\020\021\171\036\166\051\163\052\165\053" +
    "\172\054\170\055\164\001\002\000\004\025\uffcb\001\002" +
    "\000\010\025\uffcc\042\237\043\236\001\002\000\004\025" +
    "\uffca\001\002\000\002\001\002\000\004\025\233\001\002" +
    "\000\004\025\uffcf\001\002\000\004\024\230\001\002\000" +
    "\004\025\uffd0\001\002\000\036\027\202\030\177\031\176" +
    "\032\211\033\201\034\205\035\204\037\175\040\207\042" +
    "\200\043\210\044\206\046\203\047\174\001\002\000\002" +
    "\001\002\000\002\001\002\000\002\001\002\000\002\001" +
    "\002\000\002\001\002\000\002\001\002\000\002\001\002" +
    "\000\002\001\002\000\002\001\002\000\002\001\002\000" +
    "\002\001\002\000\002\001\002\000\002\001\002\000\002" +
    "\001\002\000\004\025\uffd8\001\002\000\004\025\uffd3\001" +
    "\002\000\004\025\uffdb\001\002\000\004\025\uffd5\001\002" +
    "\000\004\025\uffd4\001\002\000\004\025\uffdc\001\002\000" +
    "\004\025\uffd7\001\002\000\004\025\uffdd\001\002\000\004" +
    "\025\uffd9\001\002\000\004\025\uffd2\001\002\000\004\025" +
    "\uffdf\001\002\000\004\025\uffde\001\002\000\004\025\uffda" +
    "\001\002\000\004\025\uffd6\001\002\000\004\053\231\001" +
    "\002\000\004\025\232\001\002\000\004\025\uffc9\001\002" +
    "\000\004\041\234\001\002\000\040\005\uffe7\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\023\uffe7\055\uffe7\056\uffe7\001" +
    "\002\000\004\025\uffd1\001\002\000\004\043\241\001\002" +
    "\000\004\042\240\001\002\000\004\025\uffcd\001\002\000" +
    "\004\025\uffce\001\002\000\002\001\002\000\004\025\244" +
    "\001\002\000\004\022\111\001\002\000\002\001\002\000" +
    "\004\025\247\001\002\000\004\022\250\001\002\000\004" +
    "\016\252\001\002\000\006\016\uffb9\017\uffb9\001\002\000" +
    "\002\001\002\000\006\016\252\017\255\001\002\000\004" +
    "\023\261\001\002\000\004\050\257\001\002\000\006\016" +
    "\uffba\017\uffba\001\002\000\032\005\017\006\014\007\016" +
    "\010\046\012\052\013\040\014\050\015\035\020\034\023" +
    "\uffb7\055\045\056\044\001\002\000\032\005\017\006\014" +
    "\007\016\010\046\012\052\013\040\014\050\015\035\020" +
    "\034\023\uffb8\055\045\056\073\001\002\000\040\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\023\uffbd\055\uffbd" +
    "\056\uffbd\001\002\000\004\050\263\001\002\000\034\005" +
    "\017\006\014\007\016\010\046\012\052\013\040\014\050" +
    "\015\035\016\uffbb\017\uffbb\020\034\055\045\056\044\001" +
    "\002\000\034\005\017\006\014\007\016\010\046\012\052" +
    "\013\040\014\050\015\035\016\uffbc\017\uffbc\020\034\055" +
    "\045\056\073\001\002\000\040\005\uffc1\006\uffc1\007\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\023\uffc1\055\uffc1\056\uffc1\001\002" +
    "\000\030\005\017\006\014\007\016\010\046\012\052\013" +
    "\040\014\050\015\035\020\034\055\045\056\044\001\002" +
    "\000\032\005\017\006\014\007\016\010\046\012\052\013" +
    "\040\014\050\015\035\020\034\023\270\055\045\056\073" +
    "\001\002\000\014\005\ufff9\006\ufff9\007\ufff9\023\ufff9\055" +
    "\ufff9\001\002\000\004\002\uffff\001\002\000\014\005\ufffd" +
    "\006\ufffd\007\ufffd\023\ufffd\055\ufffd\001\002\000\014\005" +
    "\ufffe\006\ufffe\007\ufffe\023\ufffe\055\ufffe\001\002\000\006" +
    "\026\275\041\276\001\002\000\002\001\002\000\042\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\023\uffe1\041" +
    "\uffe1\055\uffe1\056\uffe1\001\002\000\004\041\300\001\002" +
    "\000\042\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0" +
    "\023\uffe0\041\uffe0\055\uffe0\056\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\017\005\014\006\012\015" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\272\006\271\015\011\001\001\000\002" +
    "\001\001\000\004\027\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\035\007\050\010" +
    "\046\011\032\012\031\013\036\014\042\015\011\023\041" +
    "\024\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\065\010\074\011\064\012\063\013\066\014\067" +
    "\015\011\023\071\024\070\001\001\000\002\001\001\000" +
    "\006\006\053\015\011\001\001\000\002\001\001\000\004" +
    "\025\055\001\001\000\002\001\001\000\004\025\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\035" +
    "\007\062\010\046\011\032\012\031\013\036\014\042\015" +
    "\011\023\041\024\040\001\001\000\024\006\065\010\074" +
    "\011\064\012\063\013\066\014\067\015\011\023\071\024" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\035\007\103\010\046\011\032\012\031\013" +
    "\036\014\042\015\011\023\041\024\040\001\001\000\024" +
    "\006\065\010\074\011\064\012\063\013\066\014\067\015" +
    "\011\023\071\024\070\001\001\000\002\001\001\000\004" +
    "\025\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\035\007\112\010\046\011\032\012\031\013\036" +
    "\014\042\015\011\023\041\024\040\001\001\000\002\001" +
    "\001\000\024\006\065\010\074\011\064\012\063\013\066" +
    "\014\067\015\011\023\071\024\070\001\001\000\002\001" +
    "\001\000\004\025\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\006\035\007\120\010\046\011\032\012" +
    "\031\013\036\014\042\015\011\023\041\024\040\001\001" +
    "\000\026\006\065\010\074\011\064\012\063\013\066\014" +
    "\067\015\011\016\122\023\071\024\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\035" +
    "\007\130\010\046\011\032\012\031\013\036\014\042\015" +
    "\011\023\041\024\040\001\001\000\024\006\065\010\074" +
    "\011\064\012\063\013\066\014\067\015\011\023\071\024" +
    "\070\001\001\000\002\001\001\000\004\025\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\035\007" +
    "\136\010\046\011\032\012\031\013\036\014\042\015\011" +
    "\023\041\024\040\001\001\000\024\006\065\010\074\011" +
    "\064\012\063\013\066\014\067\015\011\023\071\024\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\035\007\142\010\046\011\032\012\031\013\036\014\042" +
    "\015\011\023\041\024\040\001\001\000\024\006\065\010" +
    "\074\011\064\012\063\013\066\014\067\015\011\023\071" +
    "\024\070\001\001\000\002\001\001\000\004\025\145\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\035" +
    "\007\150\010\046\011\032\012\031\013\036\014\042\015" +
    "\011\023\041\024\040\001\001\000\024\006\065\010\074" +
    "\011\064\012\063\013\066\014\067\015\011\023\071\024" +
    "\070\001\001\000\002\001\001\000\006\021\153\025\155" +
    "\001\001\000\002\001\001\000\004\025\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\025\172\026\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\226" +
    "\001\001\000\004\025\225\001\001\000\004\025\224\001" +
    "\001\000\004\025\223\001\001\000\004\025\222\001\001" +
    "\000\004\025\221\001\001\000\004\025\220\001\001\000" +
    "\004\025\217\001\001\000\004\025\216\001\001\000\004" +
    "\025\215\001\001\000\004\025\214\001\001\000\004\025" +
    "\213\001\001\000\004\025\212\001\001\000\004\025\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\250" +
    "\022\252\001\001\000\002\001\001\000\004\025\261\001" +
    "\001\000\006\017\255\020\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\006\035\007" +
    "\257\010\046\011\032\012\031\013\036\014\042\015\011" +
    "\023\041\024\040\001\001\000\024\006\065\010\074\011" +
    "\064\012\063\013\066\014\067\015\011\023\071\024\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\035\007\263\010\046\011\032\012\031\013\036\014\042" +
    "\015\011\023\041\024\040\001\001\000\024\006\065\010" +
    "\074\011\064\012\063\013\066\014\067\015\011\023\071" +
    "\024\070\001\001\000\002\001\001\000\026\006\035\007" +
    "\266\010\046\011\032\012\031\013\036\014\042\015\011" +
    "\023\041\024\040\001\001\000\024\006\065\010\074\011" +
    "\064\012\063\013\066\014\067\015\011\023\071\024\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SINTACTICO2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SINTACTICO2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SINTACTICO2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
   
  
    public  LinkedList<String> VARIABLES = new LinkedList<>();
    public  LinkedList<METODO> METODOS = new LinkedList<>();
    public CLASE CLASS ;
   
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SINTACTICO2$actions {
  private final SINTACTICO2 parser;

  /** Constructor */
  CUP$SINTACTICO2$actions(SINTACTICO2 parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SINTACTICO2$do_action_part00000000(
    int                        CUP$SINTACTICO2$act_num,
    java_cup.runtime.lr_parser CUP$SINTACTICO2$parser,
    java.util.Stack            CUP$SINTACTICO2$stack,
    int                        CUP$SINTACTICO2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SINTACTICO2$result;

      /* select the action based on the action number */
      switch (CUP$SINTACTICO2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).value;
		RESULT = start_val;
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SINTACTICO2$parser.done_parsing();
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CLASE 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CLASE ::= classs id llaveabierta CUERPOCLASE llavecerrada 
            {
              String RESULT =null;
		int IDXleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).left;
		int IDXright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).right;
		String IDX = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).value;
		int abileft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).left;
		int abiright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).right;
		String abi = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).value;
		int arrmetleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).left;
		int arrmetright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).right;
		String arrmet = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).value;
		int cerrleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).left;
		int cerrright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).right;
		String cerr = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.peek()).value;
		CLASS = new CLASE(IDX,cerrleft-abileft,METODOS,VARIABLES);
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CLASE",1, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPOCLASE ::= CUERPOCLASE METODO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",2, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPOCLASE ::= CUERPOCLASE DECLARACION 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",2, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPOCLASE ::= METODO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",2, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPOCLASE ::= DECLARACION 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOCLASE",2, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METODO ::= id parizq PARAMETROS parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;
		int ID1left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)).left;
		int ID1right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)).right;
		String ID1 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)).value;
		int NOPARleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)).left;
		int NOPARright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)).right;
		Double NOPAR = (Double)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)).value;
		int CONTleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).left;
		int CONTright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).right;
		String CONT = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).value;
		int CONT2left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).left;
		int CONT2right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).right;
		String CONT2 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.peek()).value;
		METODOS.add(new METODO(ID1,NOPAR,CONT2left-CONTleft));
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METODO ::= id parizq parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;
		int ID2left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-5)).left;
		int ID2right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-5)).right;
		String ID2 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-5)).value;
		int CONT3left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).left;
		int CONT3right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).right;
		String CONT3 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).value;
		int CONT4left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).left;
		int CONT4right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()).right;
		String CONT4 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.peek()).value;
		METODOS.add(new METODO(ID2,0.0,CONT4left-CONT3left)); 
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("METODO",3, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-5)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PARAMETROS ::= PARAMETROS coma id 
            {
              Double RESULT =null;
		int PARleft = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).left;
		int PARright = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).right;
		Double PAR = (Double)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)).value;
		RESULT = PAR+1.0;
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETROS ::= id 
            {
              Double RESULT =null;
		RESULT = 1.0; 
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("PARAMETROS",21, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPOGEN ::= CUERPOGEN DECLARACION 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPOGEN ::= CUERPOGEN IFG 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPOGEN ::= CUERPOGEN FO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPOGEN ::= CUERPOGEN WH 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPOGEN ::= CUERPOGEN DO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPOGEN ::= CUERPOGEN SW 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPOGEN ::= CUERPOGEN LFUNC 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPOGEN ::= CUERPOGEN consolelog parizq E parder puntoycoma 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-5)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPOGEN ::= CUERPOGEN TBRE 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOGEN ::= IFG 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPOGEN ::= FO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPOGEN ::= WH 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPOGEN ::= DO 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPOGEN ::= SW 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPOGEN ::= LFUNC 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPOGEN ::= consolelog parizq EXPRESIONES parder puntoycoma 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPOGEN ::= DECLARACION 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPOGEN ::= TBRE 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CUERPOGEN",5, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPODECLARACION ::= varr 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("TIPODECLARACION",11, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPODECLARACION ::= lett 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("TIPODECLARACION",11, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPODECLARACION ::= constt 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("TIPODECLARACION",11, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPODECLARACION id puntoycoma 
            {
              String RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)).value;
		 String id= id1; VARIABLES.add(id); 
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= TIPODECLARACION id igual E puntoycoma 
            {
              String RESULT =null;
		int id2left = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)).value;
		String id= id2; VARIABLES.add(id);
              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("DECLARACION",4, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESIONES ::= E and E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONES ::= E or E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONES ::= E igualigual E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESIONES ::= E diferente E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONES ::= E menorigual E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONES ::= E mayorigual E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES ::= E menor E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES ::= E mayor E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONES ::= E division E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESIONES ::= E potencia E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESIONES ::= E por E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESIONES ::= E modulo E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESIONES ::= E mas E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONES ::= E menos E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONES ::= not E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESIONES ::= cadenas 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONES ::= decimal 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONES ::= id mas mas 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESIONES ::= id menos menos 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESIONES ::= id 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESIONES ::= truee 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESIONES ::= falsee 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESIONES ::= requiree parizq cadenas parder 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",20, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IFG ::= iff parizq E parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("IFG",6, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IFG ::= iff parizq E parder llaveabierta CUERPOGEN elsee llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("IFG",6, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-9)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IFG ::= iff parizq E parder llaveabierta CUERPOGEN ELS llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("IFG",6, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-7)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IFG ::= iff parizq E parder llaveabierta CUERPOGEN ELS elsee llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("IFG",6, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-10)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELS ::= ELS elsee iff parizq E parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("ELS",12, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-8)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ELS ::= elsee iff parizq E parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("ELS",12, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-7)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TBRE ::= breakk 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("TBRE",17, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // TBRE ::= breakk puntoycoma 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("TBRE",17, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FO ::= forr parizq DECLARACION puntoycoma E puntoycoma E parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("FO",7, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-10)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WH ::= whilee parizq E parder llaveabierta CUERPOGEN llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("WH",8, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-6)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DO ::= doo llaveabierta CUERPOGEN whilee parizq E parder puntoycoma 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("DO",18, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-7)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SW ::= switchh parizq E parder llaveabierta LISTADOCASE DEF llavecerrada 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("SW",9, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-7)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CAS ::= casee E dospuntos CUERPOGEN 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CAS",13, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-3)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CAS ::= casee E dospuntos 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("CAS",13, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LISTADOCASE ::= LISTADOCASE CAS 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("LISTADOCASE",16, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LISTADOCASE ::= CAS 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("LISTADOCASE",16, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DEF ::= defaultt dospuntos CUERPOGEN 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("DEF",14, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-2)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DEF ::= defaultt dospuntos 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("DEF",14, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LFUNC ::= id parizq LISTAD parder puntoycoma 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("LFUNC",10, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-4)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTAD ::= coma E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("LISTAD",15, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.elementAt(CUP$SINTACTICO2$top-1)), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LISTAD ::= E 
            {
              String RESULT =null;

              CUP$SINTACTICO2$result = parser.getSymbolFactory().newSymbol("LISTAD",15, ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), ((java_cup.runtime.Symbol)CUP$SINTACTICO2$stack.peek()), RESULT);
            }
          return CUP$SINTACTICO2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SINTACTICO2$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SINTACTICO2$do_action(
    int                        CUP$SINTACTICO2$act_num,
    java_cup.runtime.lr_parser CUP$SINTACTICO2$parser,
    java.util.Stack            CUP$SINTACTICO2$stack,
    int                        CUP$SINTACTICO2$top)
    throws java.lang.Exception
    {
              return CUP$SINTACTICO2$do_action_part00000000(
                               CUP$SINTACTICO2$act_num,
                               CUP$SINTACTICO2$parser,
                               CUP$SINTACTICO2$stack,
                               CUP$SINTACTICO2$top);
    }
}

}
