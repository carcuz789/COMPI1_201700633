
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ANALIZADOR2;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import ANALIZADOR.CLASE;
import ANALIZADOR.METODO;
import ANALIZADOR.VARGLOB;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\003\007\000\002\003\012\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\006\000" +
    "\002\003\011\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\006\000\002\005\006\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\006\000\002\005\006\000\002\005\005" +
    "\000\002\005\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\010\004\000\002" +
    "\010\004\000\002\010\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\004\000\002\006\007\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\005\000\002\006\005" +
    "\000\002\012\004\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\004" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\007\007\000\002\007\006\000\002\007\006\000\002" +
    "\007\006\000\002\007\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\015\005\001\002\000\006\002\353\015" +
    "\354\001\002\000\004\012\006\001\002\000\014\014\011" +
    "\016\012\017\007\025\013\026\014\001\002\000\004\012" +
    "\350\001\002\000\016\013\204\014\206\016\210\017\205" +
    "\025\207\026\211\001\002\000\004\012\145\001\002\000" +
    "\004\005\137\001\002\000\004\012\050\001\002\000\004" +
    "\012\015\001\002\000\006\007\017\020\016\001\002\000" +
    "\004\032\043\001\002\000\004\032\036\001\002\000\010" +
    "\007\023\013\021\020\022\001\002\000\016\013\ufff5\014" +
    "\ufff5\016\ufff5\017\ufff5\025\ufff5\026\ufff5\001\002\000\004" +
    "\032\031\001\002\000\004\032\024\001\002\000\006\030" +
    "\026\031\025\001\002\000\004\004\030\001\002\000\004" +
    "\004\027\001\002\000\010\007\uff9e\013\uff9e\020\uff9e\001" +
    "\002\000\010\007\uff9d\013\uff9d\020\uff9d\001\002\000\006" +
    "\030\033\031\032\001\002\000\004\004\035\001\002\000" +
    "\004\004\034\001\002\000\010\007\uffa0\013\uffa0\020\uffa0" +
    "\001\002\000\010\007\uff9f\013\uff9f\020\uff9f\001\002\000" +
    "\006\030\040\031\037\001\002\000\004\004\042\001\002" +
    "\000\004\004\041\001\002\000\010\007\uff9a\013\uff9a\020" +
    "\uff9a\001\002\000\010\007\uff99\013\uff99\020\uff99\001\002" +
    "\000\006\030\045\031\044\001\002\000\004\004\047\001" +
    "\002\000\004\004\046\001\002\000\010\007\uff9c\013\uff9c" +
    "\020\uff9c\001\002\000\010\007\uff9b\013\uff9b\020\uff9b\001" +
    "\002\000\010\020\051\021\052\022\054\001\002\000\004" +
    "\032\132\001\002\000\004\032\130\001\002\000\012\013" +
    "\075\020\076\021\077\022\100\001\002\000\004\032\055" +
    "\001\002\000\016\011\061\027\057\030\064\031\056\037" +
    "\060\040\062\001\002\000\030\010\uffa5\013\uffa5\020\uffa5" +
    "\021\uffa5\022\uffa5\027\uffa5\030\uffa5\031\uffa5\033\uffa5\037" +
    "\uffa5\040\uffa5\001\002\000\030\010\uffa2\013\uffa2\020\uffa2" +
    "\021\uffa2\022\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\037" +
    "\uffa2\040\uffa2\001\002\000\030\010\uffa4\013\uffa4\020\uffa4" +
    "\021\uffa4\022\uffa4\027\uffa4\030\uffa4\031\uffa4\033\uffa4\037" +
    "\uffa4\040\uffa4\001\002\000\004\004\074\001\002\000\030" +
    "\010\uffa3\013\uffa3\020\uffa3\021\uffa3\022\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\033\uffa3\037\uffa3\040\uffa3\001\002\000\030" +
    "\010\070\013\uffbb\020\uffbb\021\uffbb\022\uffbb\027\066\030" +
    "\073\031\065\033\072\037\067\040\071\001\002\000\030" +
    "\010\uffa6\013\uffa6\020\uffa6\021\uffa6\022\uffa6\027\uffa6\030" +
    "\uffa6\031\uffa6\033\uffa6\037\uffa6\040\uffa6\001\002\000\030" +
    "\010\uffab\013\uffab\020\uffab\021\uffab\022\uffab\027\uffab\030" +
    "\uffab\031\uffab\033\uffab\037\uffab\040\uffab\001\002\000\030" +
    "\010\uffa9\013\uffa9\020\uffa9\021\uffa9\022\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\033\uffa9\037\uffa9\040\uffa9\001\002\000\030" +
    "\010\uffa8\013\uffa8\020\uffa8\021\uffa8\022\uffa8\027\uffa8\030" +
    "\uffa8\031\uffa8\033\uffa8\037\uffa8\040\uffa8\001\002\000\030" +
    "\010\uffad\013\uffad\020\uffad\021\uffad\022\uffad\027\uffad\030" +
    "\uffad\031\uffad\033\uffad\037\uffad\040\uffad\001\002\000\030" +
    "\010\uffa7\013\uffa7\020\uffa7\021\uffa7\022\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\033\uffa7\037\uffa7\040\uffa7\001\002\000\030" +
    "\010\uffaa\013\uffaa\020\uffaa\021\uffaa\022\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\037\uffaa\040\uffaa\001\002\000\030" +
    "\010\uffac\013\uffac\020\uffac\021\uffac\022\uffac\027\uffac\030" +
    "\uffac\031\uffac\033\uffac\037\uffac\040\uffac\001\002\000\030" +
    "\010\uffa1\013\uffa1\020\uffa1\021\uffa1\022\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\033\uffa1\037\uffa1\040\uffa1\001\002\000\016" +
    "\013\ufff6\014\ufff6\016\ufff6\017\ufff6\025\ufff6\026\ufff6\001" +
    "\002\000\004\032\123\001\002\000\004\032\103\001\002" +
    "\000\004\032\101\001\002\000\016\011\061\027\057\030" +
    "\064\031\056\037\060\040\062\001\002\000\030\010\070" +
    "\013\uffbf\020\uffbf\021\uffbf\022\uffbf\027\066\030\073\031" +
    "\065\033\072\037\067\040\071\001\002\000\016\011\107" +
    "\027\105\030\111\031\104\037\106\040\110\001\002\000" +
    "\030\010\uffb2\013\uffb2\020\uffb2\021\uffb2\022\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\037\uffb2\040\uffb2\001\002\000" +
    "\030\010\uffaf\013\uffaf\020\uffaf\021\uffaf\022\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\033\uffaf\037\uffaf\040\uffaf\001\002\000" +
    "\030\010\uffb1\013\uffb1\020\uffb1\021\uffb1\022\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\033\uffb1\037\uffb1\040\uffb1\001\002\000" +
    "\004\004\122\001\002\000\030\010\uffb0\013\uffb0\020\uffb0" +
    "\021\uffb0\022\uffb0\027\uffb0\030\uffb0\031\uffb0\033\uffb0\037" +
    "\uffb0\040\uffb0\001\002\000\030\010\uffb3\013\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\027\uffb3\030\uffb3\031\uffb3\033\uffb3\037" +
    "\uffb3\040\uffb3\001\002\000\030\010\117\013\uffc0\020\uffc0" +
    "\021\uffc0\022\uffc0\027\114\030\121\031\113\033\120\037" +
    "\115\040\116\001\002\000\030\010\uffb8\013\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\027\uffb8\030\uffb8\031\uffb8\033\uffb8\037" +
    "\uffb8\040\uffb8\001\002\000\030\010\uffb6\013\uffb6\020\uffb6" +
    "\021\uffb6\022\uffb6\027\uffb6\030\uffb6\031\uffb6\033\uffb6\037" +
    "\uffb6\040\uffb6\001\002\000\030\010\uffb5\013\uffb5\020\uffb5" +
    "\021\uffb5\022\uffb5\027\uffb5\030\uffb5\031\uffb5\033\uffb5\037" +
    "\uffb5\040\uffb5\001\002\000\030\010\uffb4\013\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\037" +
    "\uffb4\040\uffb4\001\002\000\030\010\uffba\013\uffba\020\uffba" +
    "\021\uffba\022\uffba\027\uffba\030\uffba\031\uffba\033\uffba\037" +
    "\uffba\040\uffba\001\002\000\030\010\uffb7\013\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\037" +
    "\uffb7\040\uffb7\001\002\000\030\010\uffb9\013\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\037" +
    "\uffb9\040\uffb9\001\002\000\030\010\uffae\013\uffae\020\uffae" +
    "\021\uffae\022\uffae\027\uffae\030\uffae\031\uffae\033\uffae\037" +
    "\uffae\040\uffae\001\002\000\006\030\125\031\124\001\002" +
    "\000\004\004\127\001\002\000\004\004\126\001\002\000" +
    "\012\013\uffc2\020\uffc2\021\uffc2\022\uffc2\001\002\000\012" +
    "\013\uffc1\020\uffc1\021\uffc1\022\uffc1\001\002\000\016\011" +
    "\107\027\105\030\111\031\104\037\106\040\110\001\002" +
    "\000\030\010\117\013\uffbc\020\uffbc\021\uffbc\022\uffbc\027" +
    "\114\030\121\031\113\033\120\037\115\040\116\001\002" +
    "\000\006\030\134\031\133\001\002\000\004\004\136\001" +
    "\002\000\004\004\135\001\002\000\012\013\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\001\002\000\012\013\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\001\002\000\004\031\140\001\002\000\004" +
    "\033\141\001\002\000\004\031\142\001\002\000\004\006" +
    "\143\001\002\000\004\004\144\001\002\000\016\013\ufff8" +
    "\014\ufff8\016\ufff8\017\ufff8\025\ufff8\026\ufff8\001\002\000" +
    "\006\034\146\035\147\001\002\000\004\030\200\001\002" +
    "\000\004\030\170\001\002\000\010\013\151\034\152\035" +
    "\153\001\002\000\016\013\ufff9\014\ufff9\016\ufff9\017\ufff9" +
    "\025\ufff9\026\ufff9\001\002\000\004\030\164\001\002\000" +
    "\004\030\154\001\002\000\004\036\155\001\002\000\010" +
    "\027\156\037\157\040\160\001\002\000\004\004\163\001" +
    "\002\000\004\004\162\001\002\000\004\004\161\001\002" +
    "\000\010\013\ufff1\034\ufff1\035\ufff1\001\002\000\010\013" +
    "\ufff2\034\ufff2\035\ufff2\001\002\000\010\013\ufff3\034\ufff3" +
    "\035\ufff3\001\002\000\004\036\165\001\002\000\004\031" +
    "\166\001\002\000\004\004\167\001\002\000\010\013\ufff4" +
    "\034\ufff4\035\ufff4\001\002\000\004\036\171\001\002\000" +
    "\010\027\172\037\173\040\174\001\002\000\004\004\177" +
    "\001\002\000\004\004\176\001\002\000\004\004\175\001" +
    "\002\000\010\013\uffed\034\uffed\035\uffed\001\002\000\010" +
    "\013\uffee\034\uffee\035\uffee\001\002\000\010\013\uffef\034" +
    "\uffef\035\uffef\001\002\000\004\036\201\001\002\000\004" +
    "\031\202\001\002\000\004\004\203\001\002\000\010\013" +
    "\ufff0\034\ufff0\035\ufff0\001\002\000\006\002\uffff\015\uffff" +
    "\001\002\000\004\012\231\001\002\000\004\012\226\001" +
    "\002\000\004\012\223\001\002\000\004\005\215\001\002" +
    "\000\004\012\212\001\002\000\006\007\017\020\016\001" +
    "\002\000\010\007\023\013\214\020\022\001\002\000\016" +
    "\013\ufffa\014\ufffa\016\ufffa\017\ufffa\025\ufffa\026\ufffa\001" +
    "\002\000\004\031\216\001\002\000\004\033\217\001\002" +
    "\000\004\031\220\001\002\000\004\006\221\001\002\000" +
    "\004\004\222\001\002\000\016\013\ufffd\014\ufffd\016\ufffd" +
    "\017\ufffd\025\ufffd\026\ufffd\001\002\000\010\020\051\021" +
    "\052\022\054\001\002\000\012\013\225\020\076\021\077" +
    "\022\100\001\002\000\016\013\ufffb\014\ufffb\016\ufffb\017" +
    "\ufffb\025\ufffb\026\ufffb\001\002\000\006\034\146\035\147" +
    "\001\002\000\010\013\230\034\152\035\153\001\002\000" +
    "\016\013\ufffe\014\ufffe\016\ufffe\017\ufffe\025\ufffe\026\ufffe" +
    "\001\002\000\014\020\232\021\233\022\235\023\236\024" +
    "\234\001\002\000\004\032\343\001\002\000\004\032\341" +
    "\001\002\000\004\032\334\001\002\000\004\032\332\001" +
    "\002\000\004\032\325\001\002\000\016\013\240\020\241" +
    "\021\242\022\244\023\245\024\243\001\002\000\016\013" +
    "\ufffc\014\ufffc\016\ufffc\017\ufffc\025\ufffc\026\ufffc\001\002" +
    "\000\004\032\320\001\002\000\004\032\300\001\002\000" +
    "\004\032\273\001\002\000\004\032\253\001\002\000\004" +
    "\032\246\001\002\000\006\030\250\031\247\001\002\000" +
    "\004\004\252\001\002\000\004\004\251\001\002\000\016" +
    "\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\001" +
    "\002\000\016\013\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\001\002\000\016\011\257\027\255\030\262\031" +
    "\254\037\256\040\260\001\002\000\034\010\uffc7\013\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\033\uffc7\037\uffc7\040\uffc7\001\002\000\034" +
    "\010\uffc4\013\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\033\uffc4\037\uffc4\040\uffc4" +
    "\001\002\000\034\010\uffc6\013\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6" +
    "\037\uffc6\040\uffc6\001\002\000\004\004\272\001\002\000" +
    "\034\010\uffc5\013\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\037\uffc5\040" +
    "\uffc5\001\002\000\034\010\266\013\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\027\264\030\271\031\263\033" +
    "\270\037\265\040\267\001\002\000\034\010\uffc8\013\uffc8" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\033\uffc8\037\uffc8\040\uffc8\001\002\000\034" +
    "\010\uffcd\013\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\037\uffcd\040\uffcd" +
    "\001\002\000\034\010\uffcb\013\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\027\uffcb\030\uffcb\031\uffcb\033\uffcb" +
    "\037\uffcb\040\uffcb\001\002\000\034\010\uffca\013\uffca\020" +
    "\uffca\021\uffca\022\uffca\023\uffca\024\uffca\027\uffca\030\uffca" +
    "\031\uffca\033\uffca\037\uffca\040\uffca\001\002\000\034\010" +
    "\uffcf\013\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\033\uffcf\037\uffcf\040\uffcf\001" +
    "\002\000\034\010\uffc9\013\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9\037" +
    "\uffc9\040\uffc9\001\002\000\034\010\uffcc\013\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\033\uffcc\037\uffcc\040\uffcc\001\002\000\034\010\uffce" +
    "\013\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\027" +
    "\uffce\030\uffce\031\uffce\033\uffce\037\uffce\040\uffce\001\002" +
    "\000\034\010\uffc3\013\uffc3\020\uffc3\021\uffc3\022\uffc3\023" +
    "\uffc3\024\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\037\uffc3" +
    "\040\uffc3\001\002\000\006\030\275\031\274\001\002\000" +
    "\004\004\277\001\002\000\004\004\276\001\002\000\016" +
    "\013\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\001" +
    "\002\000\016\013\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\001\002\000\016\011\305\027\302\030\307\031" +
    "\301\037\304\040\306\001\002\000\034\010\uffd4\013\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\033\uffd4\037\uffd4\040\uffd4\001\002\000\034" +
    "\010\uffd1\013\uffd1\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\037\uffd1\040\uffd1" +
    "\001\002\000\034\010\314\013\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\027\312\030\317\031\311\033\316" +
    "\037\313\040\315\001\002\000\034\010\uffd3\013\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\037\uffd3\040\uffd3\001\002\000\004\004" +
    "\310\001\002\000\034\010\uffd2\013\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\027\uffd2\030\uffd2\031\uffd2\033" +
    "\uffd2\037\uffd2\040\uffd2\001\002\000\034\010\uffd5\013\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\037\uffd5\040\uffd5\001\002\000\034" +
    "\010\uffd0\013\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0\037\uffd0\040\uffd0" +
    "\001\002\000\034\010\uffda\013\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\027\uffda\030\uffda\031\uffda\033\uffda" +
    "\037\uffda\040\uffda\001\002\000\034\010\uffd8\013\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\033\uffd8\037\uffd8\040\uffd8\001\002\000\034\010" +
    "\uffd7\013\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\033\uffd7\037\uffd7\040\uffd7\001" +
    "\002\000\034\010\uffdc\013\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc\037" +
    "\uffdc\040\uffdc\001\002\000\034\010\uffd6\013\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\033\uffd6\037\uffd6\040\uffd6\001\002\000\034\010\uffd9" +
    "\013\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\033\uffd9\037\uffd9\040\uffd9\001\002" +
    "\000\034\010\uffdb\013\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\027\uffdb\030\uffdb\031\uffdb\033\uffdb\037\uffdb" +
    "\040\uffdb\001\002\000\006\030\322\031\321\001\002\000" +
    "\004\004\324\001\002\000\004\004\323\001\002\000\016" +
    "\013\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec\001" +
    "\002\000\016\013\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\001\002\000\006\030\327\031\326\001\002\000" +
    "\004\004\331\001\002\000\004\004\330\001\002\000\016" +
    "\013\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\001" +
    "\002\000\016\013\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\024\uffde\001\002\000\016\011\257\027\255\030\262\031" +
    "\254\037\256\040\260\001\002\000\034\010\266\013\uffe1" +
    "\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\027\264\030" +
    "\271\031\263\033\270\037\265\040\267\001\002\000\006" +
    "\030\336\031\335\001\002\000\004\004\340\001\002\000" +
    "\004\004\337\001\002\000\016\013\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\001\002\000\016\013\uffdd\020" +
    "\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\001\002\000\016" +
    "\011\305\027\302\030\307\031\301\037\304\040\306\001" +
    "\002\000\034\010\314\013\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\027\312\030\317\031\311\033\316\037" +
    "\313\040\315\001\002\000\006\030\345\031\344\001\002" +
    "\000\004\004\347\001\002\000\004\004\346\001\002\000" +
    "\016\013\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\001\002\000\016\013\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\001\002\000\014\020\232\021\233\022\235" +
    "\023\236\024\234\001\002\000\016\013\352\020\241\021" +
    "\242\022\244\023\245\024\243\001\002\000\016\013\ufff7" +
    "\014\ufff7\016\ufff7\017\ufff7\025\ufff7\026\ufff7\001\002\000" +
    "\004\002\001\001\002\000\004\012\355\001\002\000\014" +
    "\014\011\016\012\017\007\025\013\026\014\001\002\000" +
    "\016\013\357\014\206\016\210\017\205\025\207\026\211" +
    "\001\002\000\006\002\000\015\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\101\001\001\000\002\001\001\000\004\012" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\147\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\223\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\236\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\332\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\341\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\355\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String es1="";
    public String es2="";
    public String crt="";
    public String crt2="";
    public String conca="";
    public String concat="";
    public GRAFBARRAS GRAFICABARRAS ;
    public GRAFLINEAS GRAFICALINEAS;
    public GRAFPIE GRAFICAPIE ;
    public ArrayList<VARGLOB> VARIABLESGLOBALES = new ArrayList<>();
    public ArrayList<COMPARE> COMP = new ArrayList<>(); 
    public ArrayList<String> EJEX1 = new ArrayList<>(); 
    public  ArrayList<String> VALORES1  = new ArrayList<>() ;
    public ArrayList<String> EJEX2 = new ArrayList<>(); 
    public  ArrayList<String> VALORES2  = new ArrayList<>() ;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO generarreporteestadistico llaveabierta GR llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= generarreporteestadistico llaveabierta GR llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GR ::= GR definirglobales llaveabierta DG llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GR ::= GR compare parizq cadenastring coma cadenastring parder ptcoma 
            {
              String RESULT =null;
		int car1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int car1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String car1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int car2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int car2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String car2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 parser.COMP.add(new COMPARE(car1,car2,"no","no")); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GR ::= GR graficabarras llaveabierta GB llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GR ::= GR graficapie llaveabierta GP llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GR ::= GR graficalienas llaveabierta GL llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GR ::= definirglobales llaveabierta DG llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GR ::= compare parizq cadenastring coma cadenastring parder ptcoma 
            {
              String RESULT =null;
		int car3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int car3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String car3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int car4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int car4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String car4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 parser.COMP.add(new COMPARE(car3,car4,"no","no")); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GR ::= graficabarras llaveabierta GB llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GR ::= graficapie llaveabierta GP llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GR ::= graficalienas llaveabierta GL llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DG ::= DG string id igual cadenastring ptcoma 
            {
              String RESULT =null;
		int nombvarleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvarright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar; String valor =cad; parser.VARIABLESGLOBALES.add(new VARGLOB("String",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DG ::= DG doublee id igual decimal ptcoma 
            {
              String RESULT =null;
		int nombvar2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		String id = nombvar2; String valor =dec; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DG ::= DG doublee id igual pgen ptcoma 
            {
              String RESULT =null;
		int nombvar3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar3; String valor =cad3; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DG ::= DG doublee id igual pesp ptcoma 
            {
              String RESULT =null;
		int nombvar4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar4; String valor =cad4; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DG ::= string id igual cadenastring ptcoma 
            {
              String RESULT =null;
		int nombvar5left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar5right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar5 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad15left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad15right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad15 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar5; String valor =cad15; parser.VARIABLESGLOBALES.add(new VARGLOB("String",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DG ::= doublee id igual decimal ptcoma 
            {
              String RESULT =null;
		int nombvar6left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar6right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar6 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int dec6left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dec6right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String dec6 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		String id = nombvar6; String valor =dec6; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DG ::= doublee id igual pgen ptcoma 
            {
              String RESULT =null;
		int nombvar8left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar8right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar8 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad8left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad8right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad8 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar8; String valor =cad8; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DG ::= doublee id igual pesp ptcoma 
            {
              String RESULT =null;
		int nombvar88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar88; String valor =cad88; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GB ::= GB titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GB ::= GB titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GB ::= GB ejex dospuntos EJXB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GB ::= GB valores dospuntos VALB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GB ::= GB titulox dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GB ::= GB tituloy dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GB ::= GB titulox dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit33left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit33right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit33 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit33; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GB ::= GB tituloy dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit11left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit11right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit11 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit11; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GB ::= titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit5left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit5right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit5 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit5; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GB ::= titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit44left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit44right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit44 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit44; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GB ::= ejex dospuntos EJXB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GB ::= valores dospuntos VALB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GB ::= titulox dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit12left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit12right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit12 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit12; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GB ::= tituloy dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit21left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit21right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit21 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit21; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GB ::= titulox dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit55left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit55right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit55 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id1 = idtit55; parser.GRAFICABARRAS.setTitulox(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GB ::= tituloy dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id2 = idtit88; parser.GRAFICABARRAS.setTituloy(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EJXB ::= EJXB corcheteabierto 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EJXB ::= EJXB id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EJXB ::= EJXB cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EJXB ::= EJXB coma 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EJXB ::= EJXB decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX1.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EJXB ::= EJXB pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EJXB ::= EJXB pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EJXB ::= id 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id5 =idtit1; parser.EJEX1.add(id5); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EJXB ::= cadenastring 
            {
              String RESULT =null;
		int cadst1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadst1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id6 =cadst1; parser.EJEX1.add(id6); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EJXB ::= pgen 
            {
              String RESULT =null;
		int puntgen1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgen1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id7 =puntgen1; parser.EJEX1.add(id7); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EJXB ::= pesp 
            {
              String RESULT =null;
		int puntesp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntesp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id8 =puntesp1; parser.EJEX1.add(id8); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EJXB ::= decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id557=decs; parser.EJEX1.add(id557); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EJXB ::= corchetecerrado ptcoma 
            {
              String RESULT =null;
		parser.GRAFICABARRAS.setEJEX(EJEX1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALB ::= VALB corcheteabierto 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALB ::= VALB id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VALB ::= VALB cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VALB ::= VALB coma 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VALB ::= VALB decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VALB ::= VALB pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VALB ::= VALB pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VALB ::= id 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id5 =idtit1; parser.VALORES1.add(id5); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALB ::= cadenastring 
            {
              String RESULT =null;
		int cadst1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadst1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id6 =cadst1; parser.VALORES1.add(id6); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALB ::= pgen 
            {
              String RESULT =null;
		int puntgen1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgen1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id7 =puntgen1; parser.VALORES1.add(id7); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALB ::= pesp 
            {
              String RESULT =null;
		int puntesp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntesp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id8 =puntesp1; parser.VALORES1.add(id8); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALB ::= decimal 
            {
              String RESULT =null;
		int decs1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decs1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs1; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALB ::= corchetecerrado ptcoma 
            {
              String RESULT =null;
		 parser.GRAFICABARRAS.setVALORES(VALORES1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GP ::= GP titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GP ::= GP titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GP ::= GP ejex dospuntos EJXP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GP ::= GP valores dospuntos VALP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GP ::= titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GP ::= titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // GP ::= ejex dospuntos EJXP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // GP ::= valores dospuntos VALP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EJXP ::= EJXP corcheteabierto 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EJXP ::= EJXP id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EJXP ::= EJXP cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX2.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EJXP ::= EJXP coma 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EJXP ::= EJXP decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX2.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EJXP ::= EJXP pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EJXP ::= EJXP pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EJXP ::= id 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id5 =idtit1; parser.EJEX2.add(id5); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EJXP ::= cadenastring 
            {
              String RESULT =null;
		int cadst1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadst1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id6 =cadst1; parser.EJEX2.add(id6); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EJXP ::= pgen 
            {
              String RESULT =null;
		int puntgen1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgen1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id7 =puntgen1; parser.EJEX2.add(id7); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EJXP ::= pesp 
            {
              String RESULT =null;
		int puntesp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntesp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id8 =puntesp1; parser.EJEX2.add(id8); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EJXP ::= decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id557=decs; parser.EJEX2.add(id557); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EJXP ::= corchetecerrado ptcoma 
            {
              String RESULT =null;
		parser.GRAFICAPIE.setEJEX(EJEX2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALP ::= VALP corcheteabierto 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALP ::= VALP id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VALP ::= VALP cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VALP ::= VALP coma 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VALP ::= VALP decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VALP ::= VALP pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VALP ::= VALP pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VALP ::= id 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id5 =idtit1; parser.VALORES2.add(id5); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VALP ::= cadenastring 
            {
              String RESULT =null;
		int cadst1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadst1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id6 =cadst1; parser.VALORES2.add(id6); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VALP ::= pgen 
            {
              String RESULT =null;
		int puntgen1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgen1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id7 =puntgen1; parser.VALORES2.add(id7); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VALP ::= pesp 
            {
              String RESULT =null;
		int puntesp1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntesp1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id8 =puntesp1; parser.VALORES2.add(id8); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VALP ::= decimal 
            {
              String RESULT =null;
		int decs1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decs1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs1; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VALP ::= corchetecerrado ptcoma 
            {
              String RESULT =null;
		 parser.GRAFICAPIE.setVALORES(VALORES2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // GL ::= GL titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // GL ::= GL titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // GL ::= GL archivo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // GL ::= GL archivo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // GL ::= titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // GL ::= titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // GL ::= archivo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // GL ::= archivo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
