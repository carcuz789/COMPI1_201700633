
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ANALIZADOR2;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.util.ArrayList;
import ANALIZADOR.CLASE;
import ANALIZADOR.METODO;
import ANALIZADOR.VARGLOB;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\007\000\002\002" +
    "\006\000\002\003\007\000\002\003\012\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\003\006\000" +
    "\002\003\011\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\005\000\002\005\005\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\007\000\002\005\006\000\002\005\006\000\002\005\004" +
    "\000\002\005\004\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\010\007\000\002" +
    "\015\004\000\002\015\004\000\002\015\004\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\011\007\000\002\016\004\000\002" +
    "\016\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\004\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\006\007\000\002\006\007\000\002\006\005\000\002" +
    "\006\005\000\002\006\006\000\002\006\006\000\002\006" +
    "\004\000\002\006\004\000\002\012\007\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\004\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\013\007\000\002\020\004\000\002\020\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\014\005\000\002\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\015\005\001\002\000\006\002\341\015" +
    "\342\001\002\000\004\012\006\001\002\000\014\014\011" +
    "\016\012\017\007\025\013\026\014\001\002\000\004\012" +
    "\336\001\002\000\016\013\172\014\174\016\176\017\173" +
    "\025\175\026\177\001\002\000\004\012\133\001\002\000" +
    "\004\005\125\001\002\000\004\012\035\001\002\000\004" +
    "\012\015\001\002\000\006\007\017\020\016\001\002\000" +
    "\004\032\025\001\002\000\004\032\025\001\002\000\010" +
    "\007\023\013\021\020\022\001\002\000\016\013\ufff5\014" +
    "\ufff5\016\ufff5\017\ufff5\025\ufff5\026\ufff5\001\002\000\004" +
    "\032\025\001\002\000\004\032\025\001\002\000\010\007" +
    "\uffa3\013\uffa3\020\uffa3\001\002\000\006\030\027\031\026" +
    "\001\002\000\004\004\031\001\002\000\004\004\030\001" +
    "\002\000\010\007\uffa0\013\uffa0\020\uffa0\001\002\000\010" +
    "\007\uff9f\013\uff9f\020\uff9f\001\002\000\010\007\uffa4\013" +
    "\uffa4\020\uffa4\001\002\000\010\007\uffa1\013\uffa1\020\uffa1" +
    "\001\002\000\010\007\uffa2\013\uffa2\020\uffa2\001\002\000" +
    "\010\020\036\021\037\022\041\001\002\000\004\032\120" +
    "\001\002\000\004\032\071\001\002\000\012\013\064\020" +
    "\065\021\066\022\067\001\002\000\004\032\043\001\002" +
    "\000\012\013\uffbd\020\uffbd\021\uffbd\022\uffbd\001\002\000" +
    "\004\010\044\001\002\000\014\027\046\030\053\031\045" +
    "\037\047\040\051\001\002\000\020\011\uffa8\027\uffc8\030" +
    "\uffc8\031\uffc8\033\uffc8\037\uffc8\040\uffc8\001\002\000\020" +
    "\011\uffa7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\037\uffc7\040" +
    "\uffc7\001\002\000\020\011\uffa6\027\uffc6\030\uffc6\031\uffc6" +
    "\033\uffc6\037\uffc6\040\uffc6\001\002\000\004\011\062\001" +
    "\002\000\020\011\uffa5\027\uffc5\030\uffc5\031\uffc5\033\uffc5" +
    "\037\uffc5\040\uffc5\001\002\000\016\027\055\030\061\031" +
    "\054\033\060\037\056\040\057\001\002\000\020\011\uffa9" +
    "\027\uffc9\030\uffc9\031\uffc9\033\uffc9\037\uffc9\040\uffc9\001" +
    "\002\000\020\011\uffad\027\uffcd\030\uffcd\031\uffcd\033\uffcd" +
    "\037\uffcd\040\uffcd\001\002\000\020\011\uffac\027\uffcc\030" +
    "\uffcc\031\uffcc\033\uffcc\037\uffcc\040\uffcc\001\002\000\020" +
    "\011\uffab\027\uffcb\030\uffcb\031\uffcb\033\uffcb\037\uffcb\040" +
    "\uffcb\001\002\000\020\011\uffaa\027\uffca\030\uffca\031\uffca" +
    "\033\uffca\037\uffca\040\uffca\001\002\000\020\011\uffaf\027" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\037\uffcf\040\uffcf\001\002" +
    "\000\020\011\uffae\027\uffce\030\uffce\031\uffce\033\uffce\037" +
    "\uffce\040\uffce\001\002\000\004\004\063\001\002\000\012" +
    "\013\uffb0\020\uffb0\021\uffb0\022\uffb0\001\002\000\016\013" +
    "\ufff6\014\ufff6\016\ufff6\017\ufff6\025\ufff6\026\ufff6\001\002" +
    "\000\004\032\112\001\002\000\004\032\071\001\002\000" +
    "\004\032\043\001\002\000\012\013\uffc1\020\uffc1\021\uffc1" +
    "\022\uffc1\001\002\000\004\010\073\001\002\000\012\013" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\001\002\000\014\027\075" +
    "\030\101\031\074\037\076\040\077\001\002\000\020\011" +
    "\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\037\uffb4\040\uffb4" +
    "\001\002\000\020\011\uffb3\027\uffb3\030\uffb3\031\uffb3\033" +
    "\uffb3\037\uffb3\040\uffb3\001\002\000\020\011\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\033\uffb2\037\uffb2\040\uffb2\001\002\000" +
    "\020\011\uffb1\027\uffb1\030\uffb1\031\uffb1\033\uffb1\037\uffb1" +
    "\040\uffb1\001\002\000\020\011\105\027\103\030\110\031" +
    "\102\033\107\037\104\040\106\001\002\000\020\011\uffb5" +
    "\027\uffb5\030\uffb5\031\uffb5\033\uffb5\037\uffb5\040\uffb5\001" +
    "\002\000\020\011\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9" +
    "\037\uffb9\040\uffb9\001\002\000\020\011\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\033\uffb8\037\uffb8\040\uffb8\001\002\000\020" +
    "\011\uffb7\027\uffb7\030\uffb7\031\uffb7\033\uffb7\037\uffb7\040" +
    "\uffb7\001\002\000\004\004\111\001\002\000\020\011\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\033\uffb6\037\uffb6\040\uffb6\001" +
    "\002\000\020\011\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb" +
    "\037\uffbb\040\uffbb\001\002\000\020\011\uffba\027\uffba\030" +
    "\uffba\031\uffba\033\uffba\037\uffba\040\uffba\001\002\000\012" +
    "\013\uffbc\020\uffbc\021\uffbc\022\uffbc\001\002\000\006\030" +
    "\114\031\113\001\002\000\004\004\116\001\002\000\004" +
    "\004\115\001\002\000\012\013\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\001\002\000\012\013\uffc3\020\uffc3\021\uffc3\022\uffc3" +
    "\001\002\000\012\013\uffbe\020\uffbe\021\uffbe\022\uffbe\001" +
    "\002\000\006\030\122\031\121\001\002\000\004\004\124" +
    "\001\002\000\004\004\123\001\002\000\012\013\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\001\002\000\012\013\uffbf\020\uffbf" +
    "\021\uffbf\022\uffbf\001\002\000\004\031\126\001\002\000" +
    "\004\033\127\001\002\000\004\031\130\001\002\000\004" +
    "\006\131\001\002\000\004\004\132\001\002\000\016\013" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\025\ufff8\026\ufff8\001\002" +
    "\000\006\034\134\035\135\001\002\000\004\030\166\001" +
    "\002\000\004\030\156\001\002\000\010\013\137\034\140" +
    "\035\141\001\002\000\016\013\ufff9\014\ufff9\016\ufff9\017" +
    "\ufff9\025\ufff9\026\ufff9\001\002\000\004\030\152\001\002" +
    "\000\004\030\142\001\002\000\004\036\143\001\002\000" +
    "\010\027\144\037\145\040\146\001\002\000\004\004\151" +
    "\001\002\000\004\004\150\001\002\000\004\004\147\001" +
    "\002\000\010\013\ufff1\034\ufff1\035\ufff1\001\002\000\010" +
    "\013\ufff2\034\ufff2\035\ufff2\001\002\000\010\013\ufff3\034" +
    "\ufff3\035\ufff3\001\002\000\004\036\153\001\002\000\004" +
    "\031\154\001\002\000\004\004\155\001\002\000\010\013" +
    "\ufff4\034\ufff4\035\ufff4\001\002\000\004\036\157\001\002" +
    "\000\010\027\160\037\161\040\162\001\002\000\004\004" +
    "\165\001\002\000\004\004\164\001\002\000\004\004\163" +
    "\001\002\000\010\013\uffed\034\uffed\035\uffed\001\002\000" +
    "\010\013\uffee\034\uffee\035\uffee\001\002\000\010\013\uffef" +
    "\034\uffef\035\uffef\001\002\000\004\036\167\001\002\000" +
    "\004\031\170\001\002\000\004\004\171\001\002\000\010" +
    "\013\ufff0\034\ufff0\035\ufff0\001\002\000\006\002\uffff\015" +
    "\uffff\001\002\000\004\012\217\001\002\000\004\012\214" +
    "\001\002\000\004\012\211\001\002\000\004\005\203\001" +
    "\002\000\004\012\200\001\002\000\006\007\017\020\016" +
    "\001\002\000\010\007\023\013\202\020\022\001\002\000" +
    "\016\013\ufffa\014\ufffa\016\ufffa\017\ufffa\025\ufffa\026\ufffa" +
    "\001\002\000\004\031\204\001\002\000\004\033\205\001" +
    "\002\000\004\031\206\001\002\000\004\006\207\001\002" +
    "\000\004\004\210\001\002\000\016\013\ufffd\014\ufffd\016" +
    "\ufffd\017\ufffd\025\ufffd\026\ufffd\001\002\000\010\020\036" +
    "\021\037\022\041\001\002\000\012\013\213\020\065\021" +
    "\066\022\067\001\002\000\016\013\ufffb\014\ufffb\016\ufffb" +
    "\017\ufffb\025\ufffb\026\ufffb\001\002\000\006\034\134\035" +
    "\135\001\002\000\010\013\216\034\140\035\141\001\002" +
    "\000\016\013\ufffe\014\ufffe\016\ufffe\017\ufffe\025\ufffe\026" +
    "\ufffe\001\002\000\014\020\220\021\221\022\223\023\224" +
    "\024\222\001\002\000\004\032\331\001\002\000\004\032" +
    "\270\001\002\000\004\032\323\001\002\000\004\032\242" +
    "\001\002\000\004\032\315\001\002\000\016\013\226\020" +
    "\227\021\230\022\232\023\233\024\231\001\002\000\016" +
    "\013\ufffc\014\ufffc\016\ufffc\017\ufffc\025\ufffc\026\ufffc\001" +
    "\002\000\004\032\310\001\002\000\004\032\270\001\002" +
    "\000\004\032\262\001\002\000\004\032\242\001\002\000" +
    "\004\032\234\001\002\000\006\030\236\031\235\001\002" +
    "\000\004\004\240\001\002\000\004\004\237\001\002\000" +
    "\016\013\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8" +
    "\001\002\000\016\013\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\001\002\000\016\013\uffe9\020\uffe9\021\uffe9" +
    "\022\uffe9\023\uffe9\024\uffe9\001\002\000\004\010\243\001" +
    "\002\000\014\027\245\030\251\031\244\037\246\040\247" +
    "\001\002\000\020\011\uffc8\027\uffc8\030\uffc8\031\uffc8\033" +
    "\uffc8\037\uffc8\040\uffc8\001\002\000\020\011\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\033\uffc7\037\uffc7\040\uffc7\001\002\000" +
    "\020\011\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\037\uffc6" +
    "\040\uffc6\001\002\000\020\011\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\033\uffc5\037\uffc5\040\uffc5\001\002\000\020\011\254" +
    "\027\253\030\260\031\252\033\257\037\255\040\256\001" +
    "\002\000\020\011\uffc9\027\uffc9\030\uffc9\031\uffc9\033\uffc9" +
    "\037\uffc9\040\uffc9\001\002\000\020\011\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\037\uffcd\040\uffcd\001\002\000\020" +
    "\011\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\037\uffcc\040" +
    "\uffcc\001\002\000\004\004\261\001\002\000\020\011\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\033\uffcb\037\uffcb\040\uffcb\001" +
    "\002\000\020\011\uffca\027\uffca\030\uffca\031\uffca\033\uffca" +
    "\037\uffca\040\uffca\001\002\000\020\011\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\033\uffcf\037\uffcf\040\uffcf\001\002\000\020" +
    "\011\uffce\027\uffce\030\uffce\031\uffce\033\uffce\037\uffce\040" +
    "\uffce\001\002\000\016\013\uffd0\020\uffd0\021\uffd0\022\uffd0" +
    "\023\uffd0\024\uffd0\001\002\000\006\030\264\031\263\001" +
    "\002\000\004\004\266\001\002\000\004\004\265\001\002" +
    "\000\016\013\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\001\002\000\016\013\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\001\002\000\016\013\uffea\020\uffea\021" +
    "\uffea\022\uffea\023\uffea\024\uffea\001\002\000\004\010\271" +
    "\001\002\000\014\027\273\030\277\031\272\037\274\040" +
    "\275\001\002\000\020\011\uffd4\027\uffd4\030\uffd4\031\uffd4" +
    "\033\uffd4\037\uffd4\040\uffd4\001\002\000\020\011\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\033\uffd3\037\uffd3\040\uffd3\001\002" +
    "\000\020\011\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\037" +
    "\uffd2\040\uffd2\001\002\000\020\011\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\037\uffd1\040\uffd1\001\002\000\020\011" +
    "\303\027\301\030\306\031\300\033\305\037\302\040\304" +
    "\001\002\000\020\011\uffd5\027\uffd5\030\uffd5\031\uffd5\033" +
    "\uffd5\037\uffd5\040\uffd5\001\002\000\020\011\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\033\uffd9\037\uffd9\040\uffd9\001\002\000" +
    "\020\011\uffd8\027\uffd8\030\uffd8\031\uffd8\033\uffd8\037\uffd8" +
    "\040\uffd8\001\002\000\020\011\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\033\uffd7\037\uffd7\040\uffd7\001\002\000\004\004\307" +
    "\001\002\000\020\011\uffd6\027\uffd6\030\uffd6\031\uffd6\033" +
    "\uffd6\037\uffd6\040\uffd6\001\002\000\020\011\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\033\uffdb\037\uffdb\040\uffdb\001\002\000" +
    "\020\011\uffda\027\uffda\030\uffda\031\uffda\033\uffda\037\uffda" +
    "\040\uffda\001\002\000\016\013\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\001\002\000\006\030\312\031\311" +
    "\001\002\000\004\004\314\001\002\000\004\004\313\001" +
    "\002\000\016\013\uffec\020\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\001\002\000\016\013\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\024\uffeb\001\002\000\006\030\317\031\316" +
    "\001\002\000\004\004\321\001\002\000\004\004\320\001" +
    "\002\000\016\013\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0" +
    "\024\uffe0\001\002\000\016\013\uffde\020\uffde\021\uffde\022" +
    "\uffde\023\uffde\024\uffde\001\002\000\016\013\uffe1\020\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\001\002\000\006\030" +
    "\325\031\324\001\002\000\004\004\327\001\002\000\004" +
    "\004\326\001\002\000\016\013\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\001\002\000\016\013\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\024\uffdd\001\002\000\016\013" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\001\002" +
    "\000\006\030\333\031\332\001\002\000\004\004\335\001" +
    "\002\000\004\004\334\001\002\000\016\013\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\001\002\000\016\013" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\001\002" +
    "\000\014\020\220\021\221\022\223\023\224\024\222\001" +
    "\002\000\016\013\340\020\227\021\230\022\232\023\233" +
    "\024\231\001\002\000\016\013\ufff7\014\ufff7\016\ufff7\017" +
    "\ufff7\025\ufff7\026\ufff7\001\002\000\004\002\001\001\002" +
    "\000\004\012\343\001\002\000\014\014\011\016\012\017" +
    "\007\025\013\026\014\001\002\000\016\013\345\014\174" +
    "\016\176\017\173\025\175\026\177\001\002\000\006\002" +
    "\000\015\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\017\001\001" +
    "\000\004\014\033\001\001\000\004\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\031\001\001" +
    "\000\004\014\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\037\001\001\000\002\001\001" +
    "\000\004\012\116\001\001\000\002\001\001\000\004\013" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\051\020\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\071" +
    "\001\001\000\004\013\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\211\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\224\001\001\000\002\001\001\000" +
    "\004\010\327\001\001\000\002\001\001\000\004\011\321" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\266\001\001\000\002" +
    "\001\001\000\004\011\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\343\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public String es1="";
    public String es2="";
    public String crt="";
    public String crt2="";
    public String conca="";
    public String concat="";
    public GRAFBARRAS GRAFICABARRAS = new GRAFBARRAS();;
    public GRAFLINEAS GRAFICALINEAS = new GRAFLINEAS();
    public GRAFPIE GRAFICAPIE =new GRAFPIE();
    public ArrayList<GRAFBARRAS> GRAFICASBARRAS = new ArrayList<>();
    public ArrayList<GRAFLINEAS> GRAFICASLINEAS = new ArrayList<>();
    public ArrayList<GRAFPIE> GRAFICASPIE = new ArrayList<>();
    public ArrayList<VARGLOB> VARIABLESGLOBALES = new ArrayList<>();
    public ArrayList<COMPARE> COMP = new ArrayList<>(); 
    public ArrayList<String> EJEX1 = new ArrayList<>(); 
    public  ArrayList<String> VALORES1  = new ArrayList<>() ;
    public ArrayList<String> EJEX2 = new ArrayList<>(); 
    public  ArrayList<String> VALORES2  = new ArrayList<>() ;
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {
  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO generarreporteestadistico llaveabierta GR llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= generarreporteestadistico llaveabierta GR llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GR ::= GR definirglobales llaveabierta DG llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GR ::= GR compare parizq cadenastring coma cadenastring parder ptcoma 
            {
              String RESULT =null;
		int car1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int car1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String car1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int car2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int car2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String car2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 parser.COMP.add(new COMPARE(car1,car2,"no","no")); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GR ::= GR graficabarras llaveabierta GB llavecerrada 
            {
              String RESULT =null;
		 GRAFICASBARRAS.add(GRAFICABARRAS); GRAFICABARRAS= new GRAFBARRAS();
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GR ::= GR graficapie llaveabierta GP llavecerrada 
            {
              String RESULT =null;
		 GRAFICASPIE.add(GRAFICAPIE);GRAFICAPIE = new GRAFPIE(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GR ::= GR graficalienas llaveabierta GL llavecerrada 
            {
              String RESULT =null;
		GRAFICASLINEAS.add(GRAFICALINEAS);GRAFICALINEAS= new GRAFLINEAS(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GR ::= definirglobales llaveabierta DG llavecerrada 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GR ::= compare parizq cadenastring coma cadenastring parder ptcoma 
            {
              String RESULT =null;
		int car3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int car3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String car3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		int car4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int car4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String car4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 parser.COMP.add(new COMPARE(car3,car4,"no","no")); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GR ::= graficabarras llaveabierta GB llavecerrada 
            {
              String RESULT =null;
		GRAFICASBARRAS.add(GRAFICABARRAS); GRAFICABARRAS= new GRAFBARRAS(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GR ::= graficapie llaveabierta GP llavecerrada 
            {
              String RESULT =null;
		 GRAFICASPIE.add(GRAFICAPIE);GRAFICAPIE = new GRAFPIE(); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GR ::= graficalienas llaveabierta GL llavecerrada 
            {
              String RESULT =null;
		 GRAFICASLINEAS.add(GRAFICALINEAS);GRAFICALINEAS= new GRAFLINEAS();
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GR",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DG ::= DG string id igual cadenastring ptcoma 
            {
              String RESULT =null;
		int nombvarleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvarright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar; String valor =cad; parser.VARIABLESGLOBALES.add(new VARGLOB("String",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DG ::= DG doublee id igual decimal ptcoma 
            {
              String RESULT =null;
		int nombvar2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		String id = nombvar2; String valor =dec; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DG ::= DG doublee id igual pgen ptcoma 
            {
              String RESULT =null;
		int nombvar3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar3; String valor =cad3; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DG ::= DG doublee id igual pesp ptcoma 
            {
              String RESULT =null;
		int nombvar4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar4; String valor =cad4; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DG ::= string id igual cadenastring ptcoma 
            {
              String RESULT =null;
		int nombvar5left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar5right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar5 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad15left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad15right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad15 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar5; String valor =cad15; parser.VARIABLESGLOBALES.add(new VARGLOB("String",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DG ::= doublee id igual decimal ptcoma 
            {
              String RESULT =null;
		int nombvar6left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar6right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar6 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int dec6left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int dec6right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String dec6 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		String id = nombvar6; String valor =dec6; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DG ::= doublee id igual pgen ptcoma 
            {
              String RESULT =null;
		int nombvar8left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar8right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar8 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad8left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad8right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad8 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar8; String valor =cad8; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DG ::= doublee id igual pesp ptcoma 
            {
              String RESULT =null;
		int nombvar88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int nombvar88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String nombvar88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int cad88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int cad88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String cad88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = nombvar88; String valor =cad88; parser.VARIABLESGLOBALES.add(new VARGLOB("double",id,valor)); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("DG",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GB ::= GB titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GB ::= GB titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GB ::= GB ejex EJXB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GB ::= GB valores VALB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GB ::= GB titulox dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // GB ::= GB tituloy dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // GB ::= GB titulox dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit33left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit33right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit33 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit33; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // GB ::= GB tituloy dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit11left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit11right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit11 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit11; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GB ::= titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit5left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit5right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit5 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit5; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GB ::= titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit44left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit44right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit44 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit44; parser.GRAFICABARRAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GB ::= ejex EJXB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GB ::= valores VALB 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GB ::= titulox dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit12left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit12right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit12 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit12; parser.GRAFICABARRAS.setTitulox(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GB ::= tituloy dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit21left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit21right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit21 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit21; parser.GRAFICABARRAS.setTituloy(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GB ::= titulox dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit55left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit55right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit55 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id1 = idtit55; parser.GRAFICABARRAS.setTitulox(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // GB ::= tituloy dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit88left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit88right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit88 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id2 = idtit88; parser.GRAFICABARRAS.setTituloy(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GB",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EJXB ::= dospuntos corcheteabierto VARIANTES corchetecerrado ptcoma 
            {
              String RESULT =null;
		parser.GRAFICABARRAS.setEJEX(EJEX1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXB",6, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VARIANTES ::= VARIANTES coma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VARIANTES ::= VARIANTES id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VARIANTES ::= VARIANTES cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARIANTES ::= VARIANTES decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX1.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARIANTES ::= VARIANTES pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARIANTES ::= VARIANTES pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARIANTES ::= id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARIANTES ::= cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARIANTES ::= decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX1.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARIANTES ::= pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARIANTES ::= pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALB ::= dospuntos corcheteabierto VARIANTES2 corchetecerrado ptcoma 
            {
              String RESULT =null;
		 parser.GRAFICABARRAS.setVALORES(VALORES1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALB",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VARIANTES2 ::= VARIANTES2 coma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VARIANTES2 ::= VARIANTES2 id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VARIANTES2 ::= VARIANTES2 cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VARIANTES2 ::= VARIANTES2 decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VARIANTES2 ::= VARIANTES2 pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VARIANTES2 ::= VARIANTES2 pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // VARIANTES2 ::= id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES1.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIANTES2 ::= cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIANTES2 ::= decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIANTES2 ::= pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES1.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIANTES2 ::= pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES1.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES2",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // GP ::= GP titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // GP ::= GP titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit1; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // GP ::= GP ejex EJXP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // GP ::= GP valores VALP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // GP ::= titulo dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // GP ::= titulo dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit3; parser.GRAFICAPIE.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // GP ::= ejex EJXP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // GP ::= valores VALP 
            {
              String RESULT =null;
		 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GP",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EJXP ::= dospuntos corcheteabierto VARIANTES3 corchetecerrado ptcoma 
            {
              String RESULT =null;
		parser.GRAFICAPIE.setEJEX(EJEX2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("EJXP",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VARIANTES3 ::= VARIANTES3 coma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VARIANTES3 ::= VARIANTES3 id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VARIANTES3 ::= VARIANTES3 cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX2.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARIANTES3 ::= VARIANTES3 decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX2.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARIANTES3 ::= VARIANTES3 pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARIANTES3 ::= VARIANTES3 pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARIANTES3 ::= id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.EJEX2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARIANTES3 ::= cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.EJEX2.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIANTES3 ::= decimal 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id55=dec; parser.EJEX2.add(id55); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARIANTES3 ::= pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.EJEX2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIANTES3 ::= pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.EJEX2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES3",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALP ::= dospuntos corcheteabierto VARIANTES4 corchetecerrado ptcoma 
            {
              String RESULT =null;
		 parser.GRAFICAPIE.setVALORES(VALORES2);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VALP",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIANTES4 ::= VARIANTES2 coma 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIANTES4 ::= VARIANTES2 id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIANTES4 ::= VARIANTES2 cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIANTES4 ::= VARIANTES2 decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIANTES4 ::= VARIANTES2 pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIANTES4 ::= VARIANTES2 pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIANTES4 ::= id 
            {
              String RESULT =null;
		int idtitleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idtitright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String idtit = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id1=idtit; parser.VALORES2.add(id1); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIANTES4 ::= cadenastring 
            {
              String RESULT =null;
		int cadstleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int cadstright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String cadst = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 String id2 = cadst; parser.VALORES1.add(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIANTES4 ::= decimal 
            {
              String RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String decs = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=decs; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIANTES4 ::= pgen 
            {
              String RESULT =null;
		int puntgenleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntgenright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntgen = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id3=puntgen; parser.VALORES2.add(id3); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIANTES4 ::= pesp 
            {
              String RESULT =null;
		int puntespleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int puntespright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String puntesp = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		String id4=puntesp; parser.VALORES2.add(id4); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("VARIANTES4",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // GL ::= GL titulo GLOP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // GL ::= GL archivo GLOP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // GL ::= titulo GLOP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // GL ::= archivo GLOP 
            {
              String RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GL",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // GLOP ::= dospuntos id ptcoma 
            {
              String RESULT =null;
		int idtit2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id = idtit2; parser.GRAFICALINEAS.setTitulo(id); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GLOP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // GLOP ::= dospuntos cadenastring ptcoma 
            {
              String RESULT =null;
		int idtit3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idtit3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String idtit3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		 String id2 = idtit3; parser.GRAFICALINEAS.setTitulo(id2); 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("GLOP",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
